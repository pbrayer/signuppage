{"version":3,"sources":["components/SignUp/index.js","components/App.js","serviceWorker.js","index.js"],"names":["SignUpForm","props","state","username","email","name","updateInput","bind","handleClearForm","this","setState","currentState","e","value","target","id","className","width","height","viewBox","fill","xmlns","d","fillRule","clipRule","type","placeholder","onChange","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPA4DeA,G,wDAxDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACTC,SAAU,GACVC,MAAO,GACPC,KAAM,IAGV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAVP,E,8DAefE,KAAKC,UAAS,SAACC,GACJ,MAAM,CACLR,SAAU,GACVC,MAAO,GACPC,KAAM,S,kCAMRO,GACR,IAAMC,EAAQD,EAAEE,OAAOD,MAEvBJ,KAAKC,SAAL,eACKE,EAAEE,OAAOC,GAAKF,M,+BAMxB,OACA,yBAAKG,UAAY,aACd,yBAAKA,UAAU,eAAeC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,eAAeC,MAAM,8BACtG,0BAAMC,EAAE,sQACR,0BAAMC,SAAS,UAAUD,EAAE,8IAA8IE,SAAS,aAEpL,uCACA,2BAAOC,KAAO,OAAOC,YAAc,OAAOX,GAAK,OAAOF,MAAQJ,KAAKP,MAAMG,KAAMsB,SAAYlB,KAAKH,cAAc,6BAC9G,2BAAOmB,KAAO,OAAOC,YAAc,WAAWX,GAAK,WAAWF,MAAQJ,KAAKP,MAAMC,SAAUwB,SAAYlB,KAAKH,cAAc,6BAC1H,2BAAOmB,KAAO,QAAQC,YAAc,QAAQX,GAAK,QAAQF,MAAQJ,KAAKP,MAAME,MAAOuB,SAAYlB,KAAKH,cAAc,6BAElH,4BAAQsB,QAAWnB,KAAKD,iBAAxB,aACA,uD,GAhDuBqB,IAAMC,YCUhBC,MAVf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,iBCKJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7e75f812.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nclass SignUpForm extends React.Component {\n  constructor(props){\n    super(props)\n    \n    this.state = {\n        username: \"\",\n        email: \"\",\n        name: \"\"\n    }\n\n    this.updateInput = this.updateInput.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n\n }\n\n    handleClearForm(){\n     this.setState((currentState) => {\n                return{\n                 username: \"\",\n                 email: \"\",\n                 name: \"\"\n                }\n            }\n            )\n    }\n\n   updateInput(e){\n       const value = e.target.value\n\n       this.setState({\n           [e.target.id]: value\n       })\n   }\n\nrender(){\n\n  return (\n  <div className = \"container\">\n     <svg className=\"bi bi-hammer\" width=\"9em\" height=\"9em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M9.812 1.952a.5.5 0 01-.312.89c-1.671 0-2.852.596-3.616 1.185L4.857 5.073V6.21a.5.5 0 01-.146.354L3.425 7.853a.5.5 0 01-.708 0L.146 5.274a.5.5 0 010-.706l1.286-1.29a.5.5 0 01.354-.146H2.84C4.505 1.228 6.216.862 7.557 1.04a5.009 5.009 0 012.077.782l.178.129z\"/>\n    <path fillRule=\"evenodd\" d=\"M6.012 3.5a.5.5 0 01.359.165l9.146 8.646A.5.5 0 0115.5 13L14 14.5a.5.5 0 01-.756-.056L4.598 5.297a.5.5 0 01.048-.65l1-1a.5.5 0 01.366-.147z\" clipRule=\"evenodd\"/>\n     </svg>\n  <h1>Sign Up</h1>\n  <input type = \"text\" placeholder = \"name\" id = \"name\" value= {this.state.name} onChange = {this.updateInput}/><br/>\n  <input type = \"text\" placeholder = \"username\" id = \"username\" value= {this.state.username} onChange = {this.updateInput}/><br/>\n  <input type = \"email\" placeholder = \"email\" id = \"email\" value= {this.state.email} onChange = {this.updateInput}/><br/>\n\n  <button onClick = {this.handleClearForm}>Clear All</button>\n  <button>Create Account</button>\n  </div>\n \n  \n    )\n\n    }\n     };\n\nexport default SignUpForm;\n","import React from 'react';\nimport SignUpPage from \"./SignUp\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SignUpPage></SignUpPage>\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}